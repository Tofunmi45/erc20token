interface IERC20 {
    //The totalSupply function returns the total number of tokens in existence.
    function totalSupply() external view returns (unit);
    //The balanceOf function returns the balance of a specific account.
    function balanceOf(address account) external view returns (uint);
    //the transfer function allows an account to send tokens to another account.
    function transfer(address recipient, uint amount) external view returns (bool);
    // the allowance function returns the amount the spender is allowed to spend on behalf of the owner
    function allowance(address owner, address spender) external view returns (uint);
    // the approve function allows the spender to spend the amount allowed by the owner
    function approve(address spender, uint amount) external view returns (bool);
    // the trasferFrom function returns the amount the spender takes from the owner's account
    function transferFrom(address sender, address recipient, uint amount) external view returns(bool);   
    event Transfer(address indexed from, address indexed to, uint value);
    event Approved(address indexed owner, address indexed spender, uint value);
}

contract ERC20 is IERC20{
    uint public override totalSupply;
    mapping (address => uint) public override balanceOf;
    mapping(address => mapping(address => uint)) public override allowance;
    string public name = "Diamond Token";
    string public symbol = "DTK";
    uint public decimal = 18;
    function transfer (address recipient, uint amount) external override returns(bool){
    balanceOf[msg.sender] -= amount;
    balanceOf[recipient] += amount;
    emit Transfer(msg.sender, recipient, amount);
    return true;
}
    function approve(address spender,uint amount) external override returns(bool){
    allowance[msg.sender][spender] = amount;
    emit Approval(msg.sender,spender,amount);
    return true;
    }

    function transferFrom(address sender, address recipient, uint amount) external override returns(bool){
        allowance[sender][msg.sender] -= amount;
        balanceOf[sender] -= amount;
        balanceOf[recipient] += amount;
        emit Transfer(sender, recipient, amount);
        return true;
    }

function mint(uint amount)external {
    balanceOf[msg.sender]+= amount;
    totalSupply += amount;
    emit Transfer(address(0), msg.sender, amount);
}

function burn(uint amount) external{
    balanceOf[msg.sender] -= amount;
    totalSupply -= amount;
    emit Transfer(msg.sender, address(0), amount);
}
                                                           
}
